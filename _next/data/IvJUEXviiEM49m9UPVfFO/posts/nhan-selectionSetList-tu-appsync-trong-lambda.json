{"pageProps":{"postData":{"id":"nhan-selectionSetList-tu-appsync-trong-lambda","contentHtml":"<h2>TLDR</h2>\n<p>Team mình sử dụng Amplify Appsync với GraphQL, Resolver là Lambda với DB là Postgres. Gặp vấn đề là Appsync không gửi SelectionSetList mà chỉ gửi Graphql Query param cho Lambda. Dẫn đến lambda không biết phía Graphql muốn lấy field Data nào để trả về cho phù hợp. Bọn mình xử lý bằng cách sửa pipelineFunctions của Amplify để appsync cung cấp SelectionSetList cho lambda</p>\n<h2>Mở đầu</h2>\n<p>Dự án mới nhất của mình dùng Aws Amplify - Appsync chạy Graphql làm back-end. Lần đầu sử dụng công nghệ mới nên cũng không tránh khỏi nhiều bỡ ngỡ.\nKhi làm dự án, team mình gặp một vấn đề khá là thú vị liên quan đến specs của appsync. Trong bài viết này mình sẽ nói qua về vấn đề mà team mình gặp phải và cách bọn mình giải quyết. Hi vọng có thể giúp được ai đó, hoặc chính mình nếu sau này ngồi đọc lại =)))</p>\n<h2>Sơ qua về hệ thống</h2>\n<p>Thông thường nếu dùng Amplify, mọi người hay nghĩ đến việc sử dụng DynamoDB làm Database. Nói thật là nêú dùng Api là GraphQL thì các bạn nên dùng Dynamo nếu có thể được, vì nó cũng có lý do của nó. Appsync hỗ trợ rất nhiều cho Dynamo, hầu hết query thông thường đến Dynamo, Appsync có thể tự xử lý, bạn hầu như không phải viết thêm nhiều code vtl hay lambda. Tiết kiệm được kha khá effort. Tuy nhiên đó là câu chuyện ở một bài viết khác. Dự án này team mình lựa chọn sử dụng Postgres :))</p>\n<p>Có một vài lý do cho quyết định này</p>\n<ol>\n<li>Hệ thống cũ đang sử dụng Postgres. Kèm theo đó là code backend của hệ thống cũ đã có sẵn. Bọn mình không muốn tốn nhiều effort (và rủi ro) khi thiết kế lại toàn bộ hệ thống bằng Dynamo</li>\n<li>Thực tế có những màn hình phải query data với điều kiện phức tạp, khiến việc thiết kế key và index cho Dynamo có thể khó khăn hơn dự kiến</li>\n<li>Team mình cũng không có kinh nghiệm về dynamo lắm. Nếu có issue thì cá nhân mình cảm thấy tự tin hơn nhiều nếu hệ thống sử dụng postgres so vơí Dynamo. Đây là vấn đề về cá nhân thôi</li>\n</ol>\n<p>Do Appsync không thể tự resolve data source là Postgres(Chạy trên RDS) nên cần phải cung cấp function lambda làm resolve cho Appsync.\nMột request từ client đến DB sẽ có sơ đồ đại khái như thế này:</p>\n<p>Client-----> AppSync ------> Lambda ------> Postgres</p>\n<p>Client gửi một GraphQl query đến Appsync, Appsync sẽ parse query và chuyển nó thành một request đến Lambda.</p>\n<h2>Vấn đề</h2>\n<p>VD với GraphQL schema như sau</p>\n<pre><code class=\"language-GraphQL\">type Organization {\n    organization_id: String!\n    name: String!\n    description: String\n    locations: [Location]\n}\n\ntype Location {\n    loc_id: String!\n    loc_name: String!\n    description: String!\n    phone_num: String!\n    loc_status: Boolean!\n    addr: String!\n    organization: Organization\n}\n\n</code></pre>\n<p>Schema này khai báo 2 model, Organization và Location. Trong đó một Organization có thể có nhiều Location. Một location chỉ thuộc vào 1 Organization.</p>\n<p>Với Schema như thế này, chúng ta có thể viết query như sau để truy vấn Organization và Location tương ứng</p>\n<pre><code class=\"language-GraphQL\">query MyQuery {\n  organizationList {\n    name\n    organization_id\n    description\n    locations {\n      loc_id\n      loc_name\n      description\n      phone_num\n      loc_status\n      addr\n    }\n  }\n}\n</code></pre>\n<p>Với query này, mặc định lambda function sẽ nhận được request với parameters như sau</p>\n<pre><code class=\"language-json\">{\n    \"typeName\": \"Query\",\n    \"fieldName\": \"organizationList\",\n    \"arguments\": {},\n    \"identity\": {\n        // Cognito user info\n    },\n    \"source\": null,\n    \"request\": {\n        \"headers\": {\n            // Request headers\n        }\n    },\n    \"prev\": {\n        \"result\": {}\n    },\n}\n</code></pre>\n<p>Đến đây chắc hẳn bạn đã nhận ra được vấn đề. Không hiểu vì lý do gì mà theo mặc định của amplify, appsync sẽ không chuyển cho Lambda danh sách field được chỉ định trong query.\nVí dụ như trong query trên, lambda cần trả về cho appsync các trường <code>name</code> <code>organization_id</code> <code>description</code> của Organization, và <code>loc_id</code> <code>loc_name</code> <code>description</code> <code>phone_num</code> <code>loc_status</code> <code>addr</code> của Location liên quan. Tuy nhiên trong param cuả function lambda, chỉ có arguments của query, dẫn đến lamda không có đủ thông tin để trả về data một cách hiệu quả.</p>\n<p>Mình nói 'một cách hiệu quả' vì trong nhiều trường hợp lambda vẫn có thể generate query dạng <code>Select * from organization join location ...</code> để trả về.</p>\n<p>Tuy nhiên, do GraphQL có thể query được nested object một cách linh hoạt. Nên hoàn toàn có thể nhận query như dưới đây</p>\n<pre><code class=\"language-GraphQL\">query MyQuery {\n  organizationList {\n    name\n    organization_id\n    description\n    locations {\n      loc_id\n      loc_name\n      description\n      phone_num\n      loc_status\n      addr\n      organization {\n        name\n      }\n    }\n  }\n}\n</code></pre>\n<p>hoặc thậm chí như dưới đây</p>\n<pre><code class=\"language-GraphQL\">query MyQuery {\n  organizationList {\n    name\n    organization_id\n    description\n    locations {\n      loc_id\n      loc_name\n      description\n      phone_num\n      loc_status\n      addr\n      organization {\n        name\n        locations {\n          loc_name\n        }\n      }\n    }\n  }\n}\n</code></pre>\n<p>hoặc đơn giản là</p>\n<pre><code class=\"language-GraphQL\">query MyQuery {\n  organizationList {\n    name\n    organization_id\n    description\n  }\n}\n</code></pre>\n<p>Tất cả query trên, lambda đều nhận được request giống hệt nhau. Quá vô lý!!! Nhưng đó là mặc định của Amplify.</p>\n<h2>Cách giải quyết</h2>\n<p>Sau nhiều giờ bơi lội trong đống tài liệu của Amplify, mình đã mò ra được giải pháp.</p>\n<p>Tham số truyền cho lambda có thể được tùy biến thông qua file vtl template. Về các tham số có thể tùy biến, Amplify có viết trong tài liệu sau.</p>\n<p><a href=\"https://docs.aws.amazon.com/appsync/latest/devguide/resolver-context-reference.html\">https://docs.aws.amazon.com/appsync/latest/devguide/resolver-context-reference.html</a></p>\n<p><a href=\"https://docs.amplify.aws/cli/graphql-transformer/resolvers\">https://docs.amplify.aws/cli/graphql-transformer/resolvers</a></p>\n<p>Trong tài liệu chính thức Amplify chỉ nói đến việc custom resolvers cho mỗi graphql query bằng cách tạo thư mục resolvers bên dưới thư mục <code>\\amplify\\backend\\api\\[tên API]</code></p>\n<p>Tuy nhiên bạn cũng có thể làm tương tự với thư mục <code>pipelineFunctions</code>\nTrong thư mục <code>pipelineFunctions</code> hãy tạo file vtl với nội dung tương tự như sau</p>\n<pre><code>{\n  \"version\": \"2018-05-29\",\n  \"operation\": \"Invoke\",\n  \"payload\": {\n      \"typeName\": \"$ctx.stash.get(\"typeName\")\",\n      \"fieldName\": \"$ctx.stash.get(\"fieldName\")\",\n      \"arguments\": $util.toJson($ctx.arguments),\n      \"identity\": $util.toJson($ctx.identity),\n      \"source\": $util.toJson($ctx.source),\n      \"request\": $util.toJson($ctx.request),\n      \"prev\": $util.toJson($ctx.prev),\n      \"selectionSetList\": $util.toJson($ctx.info.selectionSetList), ## Đây là thông tin mà lambda cần\n  }\n}\n</code></pre>\n<p>Tên file cần đặt theo đúng conventions của Amplify. Tuy nhiên để đơn giản thì bạn có thể copy lại file vtl đã có sẵn trong thư mục build của amplify và tùy biến lại.</p>\n<p>Khi chạy lệnh <code>amplify push</code>, Amplify sẽ copy file trong thư mục này vào thư mục cùng tên trong thư mục build. Đồng thời khởi tạo lambda function với template được chỉ định.</p>\n<p>Nếu push thành công thì trong lambda function, ngoài các thông tin đã có, bạn sẽ nhận được thêm selectionSetList trong tham số event đầu vào.</p>\n<p>Khi đó, event trong ví dụ ở đầu bài sẽ có dạng như sau:</p>\n<pre><code class=\"language-json\">{\n    \"typeName\": \"Query\",\n    \"fieldName\": \"organizationList\",\n    \"arguments\": {},\n    \"identity\": {\n        // Cognito user info\n    },\n    \"source\": null,\n    \"request\": {\n        \"headers\": {\n            // Request headers\n        }\n    },\n    \"prev\": {\n        \"result\": {}\n    },\n    \"selectionSetList\": [\n        \"organizations_list\",\n        \"organizations_list/name\",\n        \"organizations_list/organization_id\",\n        \"organizations_list/description\",\n        \"organizations_list/locations_list\",\n        \"organizations_list/locations_list/addr1\",\n        \"organizations_list/locations_list/description\",\n        \"organizations_list/locations_list/loc_name\",\n        \"organizations_list/locations_list/sysid\",\n        \"organizations_list/locations_list/loc_status\"\n    ]\n}\n</code></pre>\n<p><code>selectionSetList</code> ở đây chính là tham số mà lambda cần để sinh query. Đến đây lambda đã có đầy đủ thông tin, việc còn lại chỉ là sinh query để đáp ứng Graphql nữa thôi. :))\nChúc các bạn thành công!</p>\n","title":"Nhận selectionSetList từ Appsync trong lambda","date":"2021-05-03"}},"__N_SSG":true}